
AVRASM ver. 2.1.52  D:\Attiny10_tetris\tetris_all\btn_adc\btn_adc.asm Wed Sep 25 20:04:52 2024

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\tn10def.inc'
D:\Attiny10_tetris\tetris_all\btn_adc\btn_adc.asm(1): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\tn10def.inc'
                 
                 .include "tn10def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATtiny10.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn10def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny10
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny10
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN10DEF_INC_
                 #define _TN10DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny10
                 #pragma AVRPART ADMIN PART_NAME ATtiny10
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x90
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION AVR8L_0
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	CCP	= 0x3c
                 .equ	RSTFLR	= 0x3b
                 .equ	SMCR	= 0x3a
                 .equ	OSCCAL	= 0x39
                 .equ	CLKMSR	= 0x37
                 .equ	CLKPSR	= 0x36
                 .equ	PRR	= 0x35
                 .equ	VLMCSR	= 0x34
                 .equ	NVMCMD	= 0x33
                 .equ	NVMCSR	= 0x32
                 .equ	WDTCSR	= 0x31
                 .equ	GTCCR	= 0x2f
                 .equ	TCCR0A	= 0x2e
                 .equ	TCCR0B	= 0x2d
                 .equ	TCCR0C	= 0x2c
                 .equ	TIMSK0	= 0x2b
                 .equ	TIFR0	= 0x2a
                 .equ	TCNT0L	= 0x28
                 .equ	TCNT0H	= 0x29
                 .equ	OCR0AL	= 0x26
                 .equ	OCR0AH	= 0x27
                 .equ	OCR0BL	= 0x24
                 .equ	OCR0BH	= 0x25
                 .equ	ICR0L	= 0x22
                 .equ	ICR0H	= 0x23
                 .equ	ACSR	= 0x1f
                 .equ	ADCSRA	= 0x1d
                 .equ	ADCSRB	= 0x1c
                 .equ	ADMUX	= 0x1b
                 .equ	ADCL	= 0x19
                 .equ	DIDR0	= 0x17
                 .equ	EICRA	= 0x15
                 .equ	EIFR	= 0x14
                 .equ	EIMSK	= 0x13
                 .equ	PCICR	= 0x12
                 .equ	PCIFR	= 0x11
                 .equ	PCMSK	= 0x10
                 .equ	PORTCR	= 0x0c
                 .equ	PUEB	= 0x03
                 .equ	PORTB	= 0x02
                 .equ	DDRB	= 0x01
                 .equ	PINB	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel Selection Bits
                 .equ	MUX1	= 1	; Analog Channel Selection Bits
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 
                 ; ADCL - ADC Data Register
                 .equ	ADC0	= 0	; ADC Data Register Bit 0
                 .equ	ADC1	= 1	; ADC Data Register Bit 1
                 .equ	ADC2	= 2	; ADC Data Register Bit 2
                 .equ	ADC3	= 3	; ADC Data Register Bit 3
                 .equ	ADC4	= 4	; ADC Data Register Bit 4
                 .equ	ADC5	= 5	; ADC Data Register Bit 5
                 .equ	ADC6	= 6	; ADC Data Register Bit 6
                 .equ	ADC7	= 7	; ADC Data Register Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture  Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR0 - 
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** CPU **************************
                 ; CCP - Configuration Change Protection
                 .equ	CCP0	= 0	; Configuration Change Protection bit 0
                 .equ	CCP1	= 1	; Configuration Change Protection bit 1
                 .equ	CCP2	= 2	; Configuration Change Protection bit 2
                 .equ	CCP3	= 3	; Configuration Change Protection bit 3
                 .equ	CCP4	= 4	; Configuration Change Protection bit 4
                 .equ	CCP5	= 5	; Configuration Change Protection bit 5
                 .equ	CCP6	= 6	; Configuration Change Protection bit 6
                 .equ	CCP7	= 7	; Configuration Change Protection bit 7
                 
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; CLKMSR - Clock Main Settings Register
                 .equ	CLKMS0	= 0	; Clock Main Select Bit 0
                 .equ	CLKMS1	= 1	; Clock Main Select Bit 1
                 
                 ; CLKPSR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; PRR - Power Reduction Register
                 .equ	PRTIM0	= 0	; Power Reduction Timer/Counter0
                 .equ	PRADC	= 1	; Power Reduction ADC
                 
                 ; VLMCSR - Vcc Level Monitoring Control and Status Register
                 .equ	VLM0	= 0	; Trigger Level of Voltage Level Monitor bit 0
                 .equ	VLM1	= 1	; Trigger Level of Voltage Level Monitor bit 1
                 .equ	VLM2	= 2	; Trigger Level of Voltage Level Monitor bit 2
                 .equ	VLMIE	= 6	; VLM Interrupt Enable
                 .equ	VLMF	= 7	; VLM Flag
                 
                 ; RSTFLR - Reset Flag Register
                 .equ	PORF	= 0	; Power-on Reset Flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; NVMCSR - Non-Volatile Memory Control and Status Register
                 .equ	NVMBSY	= 7	; Non-Volatile Memory Busy
                 
                 ; NVMCMD - Non-Volatile Memory Command
                 .equ	NVMCMD0	= 0	; 
                 .equ	NVMCMD1	= 1	; 
                 .equ	NVMCMD2	= 2	; 
                 .equ	NVMCMD3	= 3	; 
                 .equ	NVMCMD4	= 4	; 
                 .equ	NVMCMD5	= 5	; 
                 
                 
                 ; ***** PORTB ************************
                 ; PORTCR - Port Control Register
                 .equ	BBMB	= 1	; Break-Before-Make Mode Enable
                 
                 ; PUEB - Pull-up Enable Control Register
                 .equ	PUEB0	= 0	; 
                 .equ	PUEB1	= 1	; 
                 .equ	PUEB2	= 2	; 
                 .equ	PUEB3	= 3	; 
                 
                 ; PORTB - Input Pins, Port B
                 .equ	PORTB0	= 0	; 
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; 
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; 
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; 
                 .equ	PB3	= 3	; For compatibility
                 
                 ; DDRB - Data Direction Register, Port B
                 .equ	DDB0	= 0	; 
                 .equ	DDB1	= 1	; 
                 .equ	DDB2	= 2	; 
                 .equ	DDB3	= 3	; 
                 
                 ; PINB - Port B Data register
                 .equ	PINB0	= 0	; 
                 .equ	PINB1	= 1	; 
                 .equ	PINB2	= 2	; 
                 .equ	PINB3	= 3	; 
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register A
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 
                 ; EIMSK - External Interrupt Mask register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 
                 ; EIFR - External Interrupt Flag register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 
                 ; PCMSK - Pin Change Mask Register
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0A - Timer/Counter 0 Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode for Channel B bit 0
                 .equ	COM0B1	= 5	; Compare Output Mode for Channel B bit 1
                 .equ	COM0A0	= 6	; Compare Output Mode for Channel A bit 0
                 .equ	COM0A1	= 7	; Compare Output Mode for Channel A bit 1
                 
                 ; TCCR0B - Timer/Counter 0 Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; Waveform Generation Mode
                 .equ	WGM03	= 4	; Waveform Generation Mode
                 .equ	ICES0	= 6	; Input Capture Edge Select
                 .equ	ICNC0	= 7	; Input Capture Noise Canceler
                 
                 ; TCCR0C - Timer/Counter 0 Control Register C
                 .equ	FOC0B	= 6	; Force Output Compare for Channel B
                 .equ	FOC0A	= 7	; Force Output Compare for Channel A
                 
                 ; TIMSK0 - Timer Interrupt Mask Register 0
                 .equ	TOIE0	= 0	; Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Output Compare A Match Interrupt Enable
                 .equ	OCIE0B	= 2	; Output Compare B Match Interrupt Enable
                 .equ	ICIE0	= 5	; Input Capture Interrupt Enable
                 
                 ; TIFR0 - Overflow Interrupt Enable
                 .equ	TOV0	= 0	; Timer Overflow Flag
                 .equ	OCF0A	= 1	; Timer Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer Output Compare Flag 0B
                 .equ	ICF0	= 5	; Input Capture Flag
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSR	= 0	; Prescaler Reset
                 .equ	TSM	= 7	; Timer Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control and Status Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timer Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timer Interrupt Flag
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; BYTE0 fuse bits
                 .equ	RSTDISBL	= 0	; Disable external reset
                 .equ	WDTON	= 1	; Watch dog timer always on
                 .equ	CKOUT	= 2	; Output external clock
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x01ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0040
                 .equ	SRAM_SIZE	= 32
                 .equ	RAMEND	= 0x005f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x0000
                 .equ	EEPROMEND	= 0x0000
                 
                 ; ***** MEMORY MAPPED NVM ************************************************
                 .equ	MAPPED_FLASH_START	= 0x4000
                 .equ	MAPPED_LOCKBITS_0	= 0x3f00
                 .equ	MAPPED_CONFIG_0	= 0x3f40
                 .equ	MAPPED_CALIB_0	= 0x3f80
                 .equ	MAPPED_SIGN_0	= 0x3fc0
                 .equ	MAPPED_SIGN_1	= 0x3fc1
                 .equ	MAPPED_SIGN_2	= 0x3fc2
                 .equ	MAPPED_FLASH_SIZE	= 0x0400
                 .equ	MAPPED_FLASH_END	= 0x43ff
                 #pragma AVRPART MEMORY PROG_FLASH 1024
                 #pragma AVRPART MEMORY EEPROM 0
                 #pragma AVRPART MEMORY INT_SRAM SIZE 32
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x40
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	PAGESIZE	= 16
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	PCI0addr	= 0x0002	; Pin Change Interrupt Request 0
                 .equ	ICP0addr	= 0x0003	; Timer/Counter0 Input Capture
                 .equ	OVF0addr	= 0x0004	; Timer/Counter0 Overflow
                 .equ	OC0Aaddr	= 0x0005	; Timer/Counter Compare Match A
                 .equ	OC0Baddr	= 0x0006	; Timer/Counter Compare Match B
                 .equ	ACIaddr	= 0x0007	; Analog Comparator
                 .equ	WDTaddr	= 0x0008	; Watchdog Time-out
                 .equ	VLMaddr	= 0x0009	; Vcc Voltage Level Monitor
                 .equ	ADCCaddr	= 0x000a	; ADC Conversion Complete
                 
                 .equ	INT_VECTORS_SIZE	= 11	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _TN10DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATtiny10.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn10def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny10
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny10
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN10DEF_INC_
                 #endif  /* _TN10DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 .cseg
                 .org 	0x00
000000 9aff      	sbi		ACSR, ACD							// disable comparator 
                 //-----------------init gpio-----------------------
000001 e003      	ldi		R16, (1 << PINB1) | (1 << PINB0)
000002 b901      	out		DDRB, R16
000003 e000      	ldi		R16, 0
000004 b902      	out		PORTB, R16
                 //-----------------init adc-----------------------
000005 e003      	ldi		R16, 3
000006 bb0b      	out		ADMUX, R16	// ADC3 PB3
000007 2700      	clr		R16
000008 bb0c      	out		ADCSRB, R16 // free run
000009 e804      	ldi		R16, (1 << ADEN) | (1 << ADPS2)
00000a bb0d      	out		ADCSRA, R16
                 	
                 _main:
00000b ec04      	ldi		R16, (1 << ADEN) | (1 << ADPS2)	| (1 << ADSC)	
00000c bb0d      	out		ADCSRA, R16
                 _nxt:
00000d b30d      	in		R16, ADCSRA
00000e 7400      	andi	R16, (1 << ADSC)
00000f f7e9      	brne	_nxt
                 
000010 e018      	ldi		R17, 8
000011 b309      	in		R16, ADCL
                 _nxt_bit:
000012 fd07      	sbrc	R16, 7
000013 9a11      	sbi		PORTB, PINB1			// set data 1
000014 ff07      	sbrs	R16, 7
000015 9811      	cbi		PORTB, PINB1			// set data 0
000016 0000      	nop
000017 9a10      	sbi		PORTB, PINB0			// set clk 1
000018 0f00      	lsl		R16
000019 951a      	dec		R17
00001a 9810      	cbi		PORTB, PINB0			// set clk 0		
00001b f7b1      	brne	_nxt_bit
                 
00001c 9811      	cbi		PORTB, PINB1			// set data 0
00001d e200      	ldi		R16, 32
                 _delay:
00001e 950a      	dec		R16
00001f f7f1      	brne	_delay
                 
000020 cfea      	rjmp	_main
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny10" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  20 r17:   2 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 2 out of 35 (5.7%)

"ATtiny10" instruction use summary:
.lds.l:   0 .sts.l:   0 adc   :   0 add   :   0 and   :   0 andi  :   1 
asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 
brcs  :   0 breq  :   0 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   3 brpl  :   0 
brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   0 
cln   :   0 clr   :   1 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   2 
eor   :   0 icall :   0 ijmp  :   0 in    :   2 inc   :   0 ld    :   0 
ldd   :   0 ldi   :   7 lds   :   0 lsl   :   1 lsr   :   0 mov   :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :   6 pop   :   0 
push  :   0 rcall :   0 ret   :   0 reti  :   0 rjmp  :   1 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbr   :   0 sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 
sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 
sleep :   0 st    :   0 std   :   0 sts   :   0 sub   :   0 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 14 out of 99 (14.1%)

"ATtiny10" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000042     66      0     66    1024   6.4%
[.dseg] 0x000040 0x000060      0      0      0      32   0.0%
[.eseg] 0x000000 0x000000      0      0      0       0      -

Assembly complete, 0 errors, 0 warnings
